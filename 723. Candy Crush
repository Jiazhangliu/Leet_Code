https://leetcode.com/problems/candy-crush/

解题思路：
分两步：
1. crush，对所有的position判断 上下左右有没有三个连着的，如果有就记录下来这个x，y坐标， 然后最后把他们都变成零
2. drop，对说有的点判断，如果当前点不是零且下一行同一位置不是零 就可以往下降落一格，再对row+1和row-1判断。
如果可以crush就一直crush

class Solution {
    
    
   public int[][] candyCrush(int[][] board) {
	        
            //drop only if crushed
	        while (crush(board)){
                
	            for (int i=0; i<board.length; i++)
	                for (int j=0; j<board[0].length; j++)
	                    drop(board, i, j);
	        }
	        return board;
	    }
	    
	    private boolean crush(int[][] board){
	        
	    	List<int[]> list = new ArrayList<>();
	        for(int i=0; i<board.length; i++) {
	        	for(int j=0; j<board[0].length; j++) {
	        		
	        		int cur = board[i][j];
                    if (cur != 0){
                        if ( (j-1 >= 0 && j+1<board[0].length && board[i][j-1] == cur && cur == board[i][j+1])
                            || (j-2>=0 && board[i][j-2] == cur && cur == board[i][j-1])
                            || (j+2<board[0].length && board[i][j+1] == cur && cur == board[i][j+2])
                            || (i-1 >= 0 && i+1<board.length && board[i-1][j] == cur && cur == board[i+1][j])
                            || (i-2>=0 && board[i-2][j] == cur && cur == board[i-1][j])
                            || (i+2<board.length && board[i+1][j] == cur && cur == board[i+2][j])
                            )
                            list.add(new int[] {i,j});
                    }
	        	}
	        }
	        for (int[] pts : list)
	        	board[pts[0]][pts[1]] = 0;
            
            return list.size() > 0;
	    }
	    
	    private void drop(int[][] board, int r, int c){
	        
	        if (r < 0 || r >= board.length || c < 0 || c >= board[0].length
	            || board[r][c] == 0)
	            return;
	        
	        int candy = board[r][c];
	        if (r+1 < board.length && board[r+1][c]==0){
	            
	            board[r+1][c] = candy;
	            board[r][c] = 0;
	            drop(board, r-1, c);
	            drop(board, r+1, c);
	        }
	    }
    
}
