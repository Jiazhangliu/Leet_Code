class Solution {
    public int uniquePathsIII(int[][] grid) {
        int[] result = new int[1];
        
        int steps = 0;
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 0) {
                    steps++;
                }
            }
        }
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    helper(grid, i, j, result, steps);
                }
            }
        }
        return result[0];
    }
    
    public void helper(int[][] grid, int i, int j, int[] result, int steps) {
        if(i < 0 || i > grid.length-1 || j < 0 || j > grid[0].length-1) {
            return;
        }
        
        if(grid[i][j] == -1 || grid[i][j] == 7) {
            return;
        }
        
        if(grid[i][j] == 2 && -1 == steps) {
            result[0] = result[0] + 1;
            return;
        }
        
        if(grid[i][j] != 2) {
            grid[i][j] = 7;
        
            helper(grid, i+1, j, result, steps-1);
            helper(grid, i-1, j, result, steps-1);
            helper(grid, i, j+1, result, steps-1);
            helper(grid, i, j-1, result, steps-1);

            grid[i][j] = 0;
        }
    }
}
