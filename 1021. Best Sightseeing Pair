https://leetcode.com/problems/best-sightseeing-pair/

max相当于A[I] + I，维护当前最大的max，相当于记录之前最大的A[I] + I.在之后而loop里只需要算最大的A[j] - j就好了

两个数组的dp简化为的两个variable

           0  1  2  3  4  5
A:         1  4  8  6  5  9

A[i] + i:  1  5  10 9  9  14
A[j] - j:  1  3  6  3  1  4

once we get A[i]+i and A[j]-j, we just need to find the largest of two when j > i for each i.
in this case, its 10 and 4. So the result is 14.

class Solution {
    public int maxScoreSightseeingPair(int[] A) {
        int result = 0;
        
        // this represents max A[i] + i so far
        int max = A[0];
        
        for(int i = 1; i < A.length; i++) {
            result = Math.max(result, max + A[i] - i); // max + A[i] - i here is just like A[i] + i + A[j] - j since i starts from 1.
            max = Math.max(max, A[i] + i);
        }
        
        return result;
    }
}
