https://leetcode.com/problems/maximum-frequency-stack/

class FreqStack {
    // given interger to its frequency mapping
    Map<Integer, Integer> frequencyMap;
    // frequency to Stack mapping
    Map<Integer, Stack<Integer>> stackMap;
    int maxFrequency = 0;
    
    public FreqStack() {
        frequencyMap = new HashMap<>();
        stackMap = new HashMap<>();
    }
    
    public void push(int x) {
        int frequency = frequencyMap.getOrDefault(x, 0) + 1;
        maxFrequency = Math.max(frequency, maxFrequency);
        
        // if there is a Stack with this frequency, push it
        if(stackMap.containsKey(frequency)) {
            stackMap.get(frequency).push(x);
        } else {
            Stack<Integer> stack = new Stack<>();
            stack.push(x);
            stackMap.put(frequency, stack);
        }
        
        // update frequency of x
        frequencyMap.put(x, frequency);
    }
    
    public int pop() {
        // get the top element in stack for maxFrequency, and the key point here is that the order will matches the order required
        int val = stackMap.get(maxFrequency).pop();
        //update frequency map since we popped an element
        frequencyMap.put(val, maxFrequency-1);
        // if there is not maxFrequency left in stack, we -- to calculate the next frequncy element
        if(stackMap.get(maxFrequency).size() == 0) {
            maxFrequency--;
        }
        return val;
    }
}

/**
 * Your FreqStack object will be instantiated and called as such:
 * FreqStack obj = new FreqStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 */
