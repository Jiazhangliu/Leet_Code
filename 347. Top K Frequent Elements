https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        List<Node> list = new LinkedList<>();
        for(Integer num : map.keySet()) {
            list.add(new Node(num, map.get(num)));
        }
        
        Collections.sort(list, new Comparator<Node>() {
            public int compare(Node n1, Node n2) {
                return n2.times - n1.times;
            }
        });
        
        List<Integer> result = new LinkedList<>();
        for(int i = 0; i < k; i++) {
            result.add(list.get(i).num);
        }
        
        return result;
    }
    
    static class Node {
        int num;
        int times;
        
        public Node(int num, int times) {
            this.num = num;
            this.times = times;
        }
    }
}
