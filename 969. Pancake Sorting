https://leetcode.com/problems/pancake-sorting/

解题思路：

3 2 4 1 5
        i
        
1. position i 从后往前遍历
2. 找到0-i之间最大的数值， 然后swap最大的到最左边
   5 1 4 2 3
3. 然后把0-i全部swap
   3 2 4 1 5
4. 重复

3 2 4 1 5
      i
      
4 2 3 1 5
      i
      
1 3 2 4 5
    i
    
3 1 2 4 5
    i
    
2 1 3 4 5
  i
  
2 1 3 4 5
  i
  
1 2 3 4 5
i

。。。
    
    
class Solution {
    public List<Integer> pancakeSort(int[] A) {
        List<Integer> result = new LinkedList<>();
        
        for(int i = A.length-1; i >= 0; i--) {
            // call helper to gt the index and do the swapping
            result.add(helper(A, i));
            result.add(i+1);
        }
        
        return result;
    }
    
    private int helper(int[] A, int j) {
        int max = Integer.MIN_VALUE;
        int pos = 0;
        for(int i = 0; i <= j; i++) {
            if(max < A[i]) {
                max = Math.max(max, A[i]);
                pos = i + 1; 
            }
        }
        
        int start = 0, end = pos - 1; 
        while(start < end) {
            int temp = A[start];
            A[start++] = A[end];
            A[end--] = temp;
        }
        
        start = 0;
        while(start < j) {
            int temp = A[start];
            A[start++] = A[j];
            A[j--] = temp;
        }
        
        return pos;
    }
}
